{"version":3,"sources":["component/Cardlist.js","component/Searchbox.js","component/scroll.js","component/ErrorBoundary.js","container/App.js","serviceWorker.js","index.js"],"names":["Cardlist","data","Error","Searchbox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","Component","App","onSearchChange","event","setState","searchField","target","value","Data","fetch","then","response","json","users","filterRobo","filter","dat","name","toLowerCase","includes","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"mRAyBeA,G,MAtBA,SAAC,GAAW,EAATC,KAIf,MAAM,IAAIC,MAAM,WCEJC,EARC,SAAC,GAChB,IADiBC,EAClB,EADkBA,aAEjB,OACC,6BACA,2BAAOC,KAAK,SAASC,YAAY,YAAYC,SAAUH,MCI1CI,EARF,SAACC,GAEb,OACC,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC/DJ,EAAMK,WCkBMC,E,kDApBd,WAAYN,GAAO,IAAD,8BACjB,cAAMA,IACDO,MAAM,CACVC,UAAS,GAHO,E,8DAMAC,EAAMC,M,+BAKvB,OAAIC,KAAKJ,MAAMC,SAKPG,KAAKX,MAAMK,SAHX,kD,GAfkBO,aC6CbC,G,wDApCd,aAAc,IAAD,8BACZ,gBAcDC,eAAe,SAACC,GACf,EAAKC,SAAS,CAAEC,YAAYF,EAAMG,OAAOC,SAdzC,EAAKZ,MAAM,CACVa,KAAK,GACLH,YAAY,IAJD,E,gEAQZ,IAAD,OACCI,MAAM,8CACJC,MAAK,SAACC,GAAY,OAAOA,EAASC,UAClCF,MAAK,SAACG,GACN,EAAKT,SAAS,CAACI,KAAKK,S,+BAStB,IAAD,OACMC,EAAWf,KAAKJ,MAAMa,KAAKO,QAAO,SAACC,GAAO,OAAOA,EAAIC,KAAKC,cAAcC,SAAS,EAAKxB,MAAMU,YAAYa,kBAC7G,OACC,yBAAKE,UAAU,OACd,2CACA,kBAAC,EAAD,CAAWrC,aAAcgB,KAAKG,iBAC9B,kBAAC,EAAD,KACA,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,KAAMkC,W,GA9BHd,cCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.55e7e483.chunk.js","sourcesContent":["import React from 'react'\nimport Card from './Card'\n\nconst Cardlist=({ data })=>{\n\n\t\tif(true)\n\t\t{\n\t\t\tthrow new Error(\"error\");\n\t\t}\n\treturn(\n\t\t<div>\n\t\t{\n\t\t\tdata.map( (val, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t<Card id={data[i].id}\n\t\t\t\t \tname={data[i].name}\n\t\t\t\t  \temail={data[i].email} />\n\t\t\t\t);\n\t\t\t}\n\t\t\t)\n\t\t}\n\t</div>\n\t);\n}\n\nexport default Cardlist;\n","import React from 'react'\nconst Searchbox=({searchChange})=>\n{\n\treturn(\n\t\t<div>\n\t\t<input type=\"search\" placeholder=\"searchbox\" onChange={searchChange}/>\n\t\t</div>\n\t\t);\n}\nexport default Searchbox;\n","import React from 'react'\nconst Scroll=(props)=>\n{\n\treturn(\n\t\t<div style={{overflowY:'scroll',border:'2px solid black',height:'500px'}}>\n\t\t{props.children}\n\t\t</div>\n\t)\n}\nexport default Scroll;\n","import React ,{Component} from 'react';\nclass ErrorBoundary extends Component{\n\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state={\n\t\t\thasError:false\n\t\t}\n\t}\n\tcomponentDidCatch(error,info){\n\n\t}\n\trender()\n\t{\n\t\tif(!this.state.hasError)\n\t\t{\n\t\t\treturn(<h1>error orrcured</h1>)\n\t\t}\n\t\telse{\n\t\t\treturn(this.props.children)\n\t\t}\n\t}\n}\nexport default ErrorBoundary;\n","import React,{ Component } from 'react';\n/*import Card from './Card';\nimport { Data } from './Data';*/\nimport Cardlist from '../component/Cardlist';\nimport Searchbox from '../component/Searchbox';\nimport Scroll from '../component/scroll';\nimport ErrorBoundary from '../component/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component{\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state={\n\t\t\tData:[],\n\t\t\tsearchField:''\n\t\t}\n\t}\n\tcomponentDidMount()\n\t{\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response)=>{return response.json();})\n\t\t\t.then((users)=>{\n\t\t\t\tthis.setState({Data:users});\n\t\t\t})\n\t}\n\tonSearchChange=(event)=>{\n\t\tthis.setState({ searchField:event.target.value });\n\t\t\n\t\t//console.log(event.target.value);\n\t}\n\trender()\n\t{\n\tconst filterRobo=this.state.Data.filter((dat)=>{return dat.name.toLowerCase().includes(this.state.searchField.toLowerCase())})\n\t\treturn(\n\t\t\t<div className=\"cen\">\n\t\t\t\t<h1 >Robofriends</h1>\n\t\t\t\t<Searchbox searchChange={this.onSearchChange}/>\n\t\t\t\t<Scroll>\n\t\t\t\t<ErrorBoundary>\n\t\t\t\t\t<Cardlist data={filterRobo} />\n\t\t\t\t</ErrorBoundary>\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\nimport { Data } from './component/Data';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t\t<App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}